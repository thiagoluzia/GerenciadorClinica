// <auto-generated />
using System;
using GC.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GC.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DBClinicaContexto))]
    partial class DBClinicaContextoModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GC.Core.Entityes.Atendimento", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Convenio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fim")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdMedico")
                        .HasColumnType("int");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.Property<int>("IdServico")
                        .HasColumnType("int");

                    b.Property<DateTime>("Inicio")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int>("TipoAtendimento")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPaciente");

                    b.HasIndex("IdServico");

                    b.HasIndex("PacienteId");

                    b.ToTable("Atendimento");
                });

            modelBuilder.Entity("GC.Core.Entityes.Medico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CRM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cpf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Especialidade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdAtendimento")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sobrenome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoSanguineo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Medico");
                });

            modelBuilder.Entity("GC.Core.Entityes.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Altura")
                        .HasColumnType("float");

                    b.Property<string>("Cpf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Peso")
                        .HasColumnType("float");

                    b.Property<string>("Sobrenome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoSanguineo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("GC.Core.Entityes.Servico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duracao")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Servicos");
                });

            modelBuilder.Entity("GC.Core.Entityes.Atendimento", b =>
                {
                    b.HasOne("GC.Core.Entityes.Medico", "NomeMedico")
                        .WithMany("Atendimentos")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GC.Core.Entityes.Paciente", "NomePaciente")
                        .WithMany()
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GC.Core.Entityes.Servico", "NomeServico")
                        .WithMany()
                        .HasForeignKey("IdServico")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GC.Core.Entityes.Paciente", null)
                        .WithMany("Atendimentos")
                        .HasForeignKey("PacienteId");

                    b.Navigation("NomeMedico");

                    b.Navigation("NomePaciente");

                    b.Navigation("NomeServico");
                });

            modelBuilder.Entity("GC.Core.Entityes.Medico", b =>
                {
                    b.OwnsOne("GC.Core.Entityes.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<int>("MedicoId")
                                .HasColumnType("int");

                            b1.Property<string>("Bairro")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Bairro");

                            b1.Property<string>("Cep")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CEP");

                            b1.Property<string>("Cidade")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Cidade");

                            b1.Property<string>("Logradouro")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Logradouro");

                            b1.Property<string>("Numero")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Numero");

                            b1.Property<string>("Referencia")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Referencia");

                            b1.Property<string>("Uf")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("UF");

                            b1.HasKey("MedicoId");

                            b1.ToTable("Medico");

                            b1.WithOwner()
                                .HasForeignKey("MedicoId");
                        });

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("GC.Core.Entityes.Paciente", b =>
                {
                    b.OwnsOne("GC.Core.Entityes.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<int>("PacienteId")
                                .HasColumnType("int");

                            b1.Property<string>("Bairro")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Bairro");

                            b1.Property<string>("Cep")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CEP");

                            b1.Property<string>("Cidade")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Cidade");

                            b1.Property<string>("Logradouro")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Logradouro");

                            b1.Property<string>("Numero")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Numero");

                            b1.Property<string>("Referencia")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Referencia");

                            b1.Property<string>("Uf")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("UF");

                            b1.HasKey("PacienteId");

                            b1.ToTable("Pacientes");

                            b1.WithOwner()
                                .HasForeignKey("PacienteId");
                        });

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("GC.Core.Entityes.Medico", b =>
                {
                    b.Navigation("Atendimentos");
                });

            modelBuilder.Entity("GC.Core.Entityes.Paciente", b =>
                {
                    b.Navigation("Atendimentos");
                });
#pragma warning restore 612, 618
        }
    }
}
